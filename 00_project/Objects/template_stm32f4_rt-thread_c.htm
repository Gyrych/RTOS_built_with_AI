<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\template_stm32f4_rt-thread_c.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\template_stm32f4_rt-thread_c.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Dec 27 23:46:27 2024
<BR><P>
<H3>Maximum Stack Usage =        744 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Func_2_Init &rArr; Drv_MccSetStepmotorLine5 &rArr; Drv_StepmotorCalcMotorFre5 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f9]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1b8]">_rt_scheduler_stack_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">list_thread</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from hal_can.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX0_IRQHandler</a> from hal_can.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">CAN2_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6d]">Drv_Mcc1CodeDiskExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc1CodeDiskExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[6c]">Drv_Mcc1ResetExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc1ResetExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[6e]">Drv_Mcc1StrikeExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc1StrikeExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[70]">Drv_Mcc2CodeDiskExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc2CodeDiskExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[6f]">Drv_Mcc2ResetExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc2ResetExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[71]">Drv_Mcc2StrikeExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc2StrikeExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[73]">Drv_Mcc3CodeDiskExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc3CodeDiskExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[72]">Drv_Mcc3ResetExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc3ResetExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[74]">Drv_Mcc3StrikeExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc3StrikeExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[76]">Drv_Mcc4CodeDiskExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc4CodeDiskExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[75]">Drv_Mcc4ResetExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc4ResetExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[77]">Drv_Mcc4StrikeExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc4StrikeExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[79]">Drv_Mcc5CodeDiskExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc5CodeDiskExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[78]">Drv_Mcc5ResetExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc5ResetExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[7a]">Drv_Mcc5StrikeExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc5StrikeExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[7c]">Drv_Mcc6CodeDiskExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc6CodeDiskExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[7b]">Drv_Mcc6ResetExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc6ResetExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[7d]">Drv_Mcc6StrikeExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc6StrikeExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[7f]">Drv_Mcc7CodeDiskExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc7CodeDiskExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[7e]">Drv_Mcc7ResetExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc7ResetExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[80]">Drv_Mcc7StrikeExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc7StrikeExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[82]">Drv_Mcc8CodeDiskExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc8CodeDiskExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[81]">Drv_Mcc8ResetExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc8ResetExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[83]">Drv_Mcc8StrikeExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc8StrikeExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[85]">Drv_Mcc9CodeDiskExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc9CodeDiskExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[84]">Drv_Mcc9ResetExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc9ResetExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[86]">Drv_Mcc9StrikeExtiIrqHandler</a> from drv_motion_control_components.o(i.Drv_Mcc9StrikeExtiIrqHandler) referenced from drv_motion_control_components.o(i.Drv_MccCreate)
 <LI><a href="#[49]">ETH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from hal_gpio.o(i.EXTI0_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from hal_gpio.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from hal_gpio.o(i.EXTI1_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from hal_gpio.o(i.EXTI2_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from hal_gpio.o(i.EXTI3_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from hal_gpio.o(i.EXTI4_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from hal_gpio.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5d]">FPU_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3c]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a9]">Func_1_Init</a> from func_1.o(i.Func_1_Init) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[ae]">Func_1_Resident</a> from func_1.o(i.Func_1_Resident) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[aa]">Func_2_Init</a> from func_2.o(i.Func_2_Init) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[af]">Func_2_Resident</a> from func_2.o(i.Func_2_Resident) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[ab]">Func_3_Init</a> from func_3.o(i.Func_3_Init) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[b0]">Func_3_Resident</a> from func_3.o(i.Func_3_Resident) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[ac]">Func_4_Init</a> from func_4.o(i.Func_4_Init) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[b1]">Func_4_Resident</a> from func_4.o(i.Func_4_Resident) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[5c]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[55]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">OTG_FS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3d]">SDIO_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[b7]">Sys_TaskStart</a> from sys_tasks.o(i.Sys_TaskStart) referenced from sys_tasks.o(i.Sys_Init)
 <LI><a href="#[5e]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_TIM9_IRQHandler</a> from hal_timer.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_TIM11_IRQHandler</a> from hal_timer.o(i.TIM1_TRG_COM_TIM11_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[25]">TIM1_UP_TIM10_IRQHandler</a> from hal_timer.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from hal_timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from hal_timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from hal_timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from hal_timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[42]">TIM6_DAC_IRQHandler</a> from hal_timer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from hal_timer.o(i.TIM7_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[37]">TIM8_BRK_TIM12_IRQHandler</a> from hal_timer.o(i.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3a]">TIM8_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[39]">TIM8_TRG_COM_TIM14_IRQHandler</a> from hal_timer.o(i.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[38]">TIM8_UP_TIM13_IRQHandler</a> from hal_timer.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from hal_uart.o(i.UART4_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from hal_uart.o(i.UART5_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from hal_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from hal_uart.o(i.USART2_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from osal.o(i.$Sub$$USART3_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">USART6_IRQHandler</a> from hal_uart.o(i.USART6_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[69]">_Drv_CanInterfaceGetMsg</a> from drv_can_interface.o(i._Drv_CanInterfaceGetMsg) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[60]">_Drv_CanInterfaceModeChoose</a> from drv_can_interface.o(i._Drv_CanInterfaceModeChoose) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[66]">_Drv_CanInterfacePutFrame</a> from drv_can_interface.o(i._Drv_CanInterfacePutFrame) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[68]">_Drv_CanInterfaceRxBufferFree</a> from drv_can_interface.o(i._Drv_CanInterfaceRxBufferFree) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[67]">_Drv_CanInterfaceRxTimeOutCheck</a> from drv_can_interface.o(i._Drv_CanInterfaceRxTimeOutCheck) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[61]">_Drv_CanInterfaceSendCmdToBuffer</a> from drv_can_interface.o(i._Drv_CanInterfaceSendCmdToBuffer) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[64]">_Drv_CanInterfaceSendDoneToBuffer</a> from drv_can_interface.o(i._Drv_CanInterfaceSendDoneToBuffer) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[63]">_Drv_CanInterfaceSendErrorToBuffer</a> from drv_can_interface.o(i._Drv_CanInterfaceSendErrorToBuffer) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[65]">_Drv_CanInterfaceSendFailedToBuffer</a> from drv_can_interface.o(i._Drv_CanInterfaceSendFailedToBuffer) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[62]">_Drv_CanInterfaceSendResponseToBuffer</a> from drv_can_interface.o(i._Drv_CanInterfaceSendResponseToBuffer) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[6a]">_Drv_CanRxIrqHandler</a> from drv_can_interface.o(i._Drv_CanRxIrqHandler) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[87]">_Drv_PwmPinIrqHandler</a> from drv_pwm_pin.o(i._Drv_PwmPinIrqHandler) referenced from drv_pwm_pin.o(i.Drv_PwmPinCreate)
 <LI><a href="#[8b]">_Drv_PwmPinIsOn</a> from drv_pwm_pin.o(i._Drv_PwmPinIsOn) referenced from drv_pwm_pin.o(i.Drv_PwmPinCreate)
 <LI><a href="#[89]">_Drv_PwmPinOff</a> from drv_pwm_pin.o(i._Drv_PwmPinOff) referenced from drv_pwm_pin.o(i.Drv_PwmPinCreate)
 <LI><a href="#[88]">_Drv_PwmPinOn</a> from drv_pwm_pin.o(i._Drv_PwmPinOn) referenced from drv_pwm_pin.o(i.Drv_PwmPinCreate)
 <LI><a href="#[8a]">_Drv_PwmPinPwm</a> from drv_pwm_pin.o(i._Drv_PwmPinPwm) referenced from drv_pwm_pin.o(i.Drv_PwmPinCreate)
 <LI><a href="#[8c]">_Drv_PwmTimerDriven1IrqHandler</a> from drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven1IrqHandler) referenced from drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
 <LI><a href="#[8d]">_Drv_PwmTimerDriven2IrqHandler</a> from drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven2IrqHandler) referenced from drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
 <LI><a href="#[8e]">_Drv_PwmTimerDriven3IrqHandler</a> from drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven3IrqHandler) referenced from drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
 <LI><a href="#[8f]">_Drv_PwmTimerDriven4IrqHandler</a> from drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven4IrqHandler) referenced from drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
 <LI><a href="#[90]">_Drv_PwmTimerDriven5IrqHandler</a> from drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven5IrqHandler) referenced from drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
 <LI><a href="#[91]">_Drv_PwmTimerDriven6IrqHandler</a> from drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven6IrqHandler) referenced from drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
 <LI><a href="#[92]">_Drv_PwmTimerDriven7IrqHandler</a> from drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven7IrqHandler) referenced from drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
 <LI><a href="#[93]">_Drv_PwmTimerDriven8IrqHandler</a> from drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven8IrqHandler) referenced from drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
 <LI><a href="#[94]">_Drv_PwmTimerDriven9IrqHandler</a> from drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven9IrqHandler) referenced from drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
 <LI><a href="#[6b]">_Drv_TaskCanIsr</a> from drv_can_interface.o(i._Drv_TaskCanIsr) referenced from drv_can_interface.o(i.Drv_CanInterfaceCreate)
 <LI><a href="#[95]">_Func_1_Hellow</a> from func_1.o(i._Func_1_Hellow) referenced from func_1.o(i.Func_1_Init)
 <LI><a href="#[97]">_Func_1_MoveBackward</a> from func_1.o(i._Func_1_MoveBackward) referenced from func_1.o(i.Func_1_Init)
 <LI><a href="#[98]">_Func_1_MoveByCoordinates</a> from func_1.o(i._Func_1_MoveByCoordinates) referenced from func_1.o(i.Func_1_Init)
 <LI><a href="#[96]">_Func_1_MoveForward</a> from func_1.o(i._Func_1_MoveForward) referenced from func_1.o(i.Func_1_Init)
 <LI><a href="#[99]">_Func_2_Hellow</a> from func_2.o(i._Func_2_Hellow) referenced from func_2.o(i.Func_2_Init)
 <LI><a href="#[9b]">_Func_2_MoveBackward</a> from func_2.o(i._Func_2_MoveBackward) referenced from func_2.o(i.Func_2_Init)
 <LI><a href="#[9c]">_Func_2_MoveByCoordinates</a> from func_2.o(i._Func_2_MoveByCoordinates) referenced from func_2.o(i.Func_2_Init)
 <LI><a href="#[9a]">_Func_2_MoveForward</a> from func_2.o(i._Func_2_MoveForward) referenced from func_2.o(i.Func_2_Init)
 <LI><a href="#[9d]">_Func_3_Hellow</a> from func_3.o(i._Func_3_Hellow) referenced from func_3.o(i.Func_3_Init)
 <LI><a href="#[9f]">_Func_3_MoveBackward</a> from func_3.o(i._Func_3_MoveBackward) referenced from func_3.o(i.Func_3_Init)
 <LI><a href="#[a0]">_Func_3_MoveByCoordinates</a> from func_3.o(i._Func_3_MoveByCoordinates) referenced from func_3.o(i.Func_3_Init)
 <LI><a href="#[9e]">_Func_3_MoveForward</a> from func_3.o(i._Func_3_MoveForward) referenced from func_3.o(i.Func_3_Init)
 <LI><a href="#[a1]">_Func_4_Hellow</a> from func_4.o(i._Func_4_Hellow) referenced from func_4.o(i.Func_4_Init)
 <LI><a href="#[a3]">_Func_4_MoveBackward</a> from func_4.o(i._Func_4_MoveBackward) referenced from func_4.o(i.Func_4_Init)
 <LI><a href="#[a4]">_Func_4_MoveByCoordinates</a> from func_4.o(i._Func_4_MoveByCoordinates) referenced from func_4.o(i.Func_4_Init)
 <LI><a href="#[a2]">_Func_4_MoveForward</a> from func_4.o(i._Func_4_MoveForward) referenced from func_4.o(i.Func_4_Init)
 <LI><a href="#[a8]">_Func_FreeMsg</a> from func_common.o(i._Func_FreeMsg) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[a6]">_Func_GatherMsg</a> from func_common.o(i._Func_GatherMsg) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[a7]">_Func_GetMsg</a> from func_common.o(i._Func_GetMsg) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[b5]">_Func_Id1RxDone</a> from func_common.o(i._Func_Id1RxDone) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[b4]">_Func_Id2RxDone</a> from func_common.o(i._Func_Id2RxDone) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[b3]">_Func_Id3RxDone</a> from func_common.o(i._Func_Id3RxDone) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[b2]">_Func_Id4RxDone</a> from func_common.o(i._Func_Id4RxDone) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[a5]">_Func_PutMsg</a> from func_common.o(i._Func_PutMsg) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[ad]">_Func_TaskCheck</a> from func_common.o(i._Func_TaskCheck) referenced from func_common.o(i.Func_Init)
 <LI><a href="#[b6]">_Sys_CmdDoFunc</a> from sys_cmd_scheduler.o(i._Sys_CmdDoFunc) referenced from sys_cmd_scheduler.o(i.Sys_CmdScheduler)
 <LI><a href="#[bd]">_Sys_TaskCheck</a> from sys_tasks.o(i._Sys_TaskCheck) referenced from sys_tasks.o(i.Sys_TaskStart)
 <LI><a href="#[b9]">_Sys_TaskCmdScheduler1</a> from sys_tasks.o(i._Sys_TaskCmdScheduler1) referenced from sys_tasks.o(i.Sys_TaskStart)
 <LI><a href="#[ba]">_Sys_TaskCmdScheduler2</a> from sys_tasks.o(i._Sys_TaskCmdScheduler2) referenced from sys_tasks.o(i.Sys_TaskStart)
 <LI><a href="#[bb]">_Sys_TaskCmdScheduler3</a> from sys_tasks.o(i._Sys_TaskCmdScheduler3) referenced from sys_tasks.o(i.Sys_TaskStart)
 <LI><a href="#[bc]">_Sys_TaskCmdScheduler4</a> from sys_tasks.o(i._Sys_TaskCmdScheduler4) referenced from sys_tasks.o(i.Sys_TaskStart)
 <LI><a href="#[b8]">_Sys_TaskCmdTransceiver</a> from sys_tasks.o(i._Sys_TaskCmdTransceiver) referenced from sys_tasks.o(i.Sys_TaskStart)
 <LI><a href="#[be]">_Sys_TaskResident1</a> from sys_tasks.o(i._Sys_TaskResident1) referenced from sys_tasks.o(i.Sys_TaskStart)
 <LI><a href="#[bf]">_Sys_TaskResident2</a> from sys_tasks.o(i._Sys_TaskResident2) referenced from sys_tasks.o(i.Sys_TaskStart)
 <LI><a href="#[c0]">_Sys_TaskResident3</a> from sys_tasks.o(i._Sys_TaskResident3) referenced from sys_tasks.o(i.Sys_TaskStart)
 <LI><a href="#[c1]">_Sys_TaskResident4</a> from sys_tasks.o(i._Sys_TaskResident4) referenced from sys_tasks.o(i.Sys_TaskStart)
 <LI><a href="#[dd]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[c7]">_shell_get</a> from osal.o(i._shell_get) referenced from osal.o(i.rti_board_start)
 <LI><a href="#[da]">cmd_free</a> from msh.o(i.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[d9]">cmd_ps</a> from msh.o(i.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[dc]">cmd_reboot</a> from func_common.o(i.cmd_reboot) referenced from func_common.o(FSymTab)
 <LI><a href="#[db]">cmd_show_can</a> from func_common.o(i.cmd_show_can) referenced from func_common.o(FSymTab)
 <LI><a href="#[cb]">finsh_system_init</a> from shell.o(i.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[c4]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[ce]">hello</a> from cmd.o(i.hello) referenced from cmd.o(FSymTab)
 <LI><a href="#[d7]">list</a> from cmd.o(i.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[d2]">list_event</a> from cmd.o(i.list_event) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[d4]">list_mailbox</a> from cmd.o(i.list_mailbox) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[cd]">list_mem</a> from mem.o(i.list_mem) referenced from mem.o(FSymTab)
 <LI><a href="#[d5]">list_msgqueue</a> from cmd.o(i.list_msgqueue) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[d3]">list_mutex</a> from cmd.o(i.list_mutex) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[d1]">list_sem</a> from cmd.o(i.list_sem) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[d0]">list_thread</a> from cmd.o(i.list_thread) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[d6]">list_timer</a> from cmd.o(i.list_timer) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[c5]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[d8]">msh_help</a> from msh.o(i.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[c2]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[c6]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[c3]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[ca]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[c9]">rti_board_start</a> from osal.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[cc]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[c8]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[cf]">version</a> from cmd.o(i.version) referenced 2 times from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[dd]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[de]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e0]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[23e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[23f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[240]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[241]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[242]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[e6]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[243]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[244]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[245]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[246]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[247]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[248]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[249]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[24a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[24b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[24c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[24d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[24e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[24f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[250]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[251]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[252]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[253]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[254]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[255]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[256]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[eb]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[257]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[258]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[259]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[25a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[25b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[25c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[25d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[df]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[25e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[e3]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e5]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[25f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[e7]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[260]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[fa]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ea]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[261]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ec]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b9]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>

<P><STRONG><a name="[1c3]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>

<P><STRONG><a name="[20d]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[20e]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[216]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[262]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[229]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[1c9]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[1d1]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[1db]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
</UL>

<P><STRONG><a name="[1ca]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[ef]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[263]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[264]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_CanInterfaceCreate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceTxBufferFree
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceRxBufferFree
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[f1]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[267]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendFailedToBuffer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendDoneToBuffer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendCmdToBuffer
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[268]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[f3]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[26a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[f7]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[26d]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[270]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[e9]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ed]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[271]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, osal.o(i.$Sub$$USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; $Super$$USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$USART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[273]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hal_can.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hal_can.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
</UL>

<P><STRONG><a name="[155]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
</UL>

<P><STRONG><a name="[156]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
</UL>

<P><STRONG><a name="[154]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
</UL>

<P><STRONG><a name="[ff]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
</UL>

<P><STRONG><a name="[149]"></a>CAN_Transmit</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CanTx
</UL>

<P><STRONG><a name="[148]"></a>CAN_TransmitStatus</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_TransmitStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TransmitStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CanTx
</UL>

<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>Drv_CanInterfaceCreate</STRONG> (Thumb, 786 bytes, Stack size 88 bytes, drv_can_interface.o(i.Drv_CanInterfaceCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Drv_CanInterfaceCreate &rArr; Osal_ThreadCreate &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_ThreadCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MailCreate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_Init
</UL>

<P><STRONG><a name="[108]"></a>Drv_LedCreate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, drv_led.o(i.Drv_LedCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Drv_LedCreate &rArr; Drv_PwmPinCreate &rArr; calloc &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmPinCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_Init
</UL>

<P><STRONG><a name="[6d]"></a>Drv_Mcc1CodeDiskExtiIrqHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc1CodeDiskExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc1CodeDiskExtiIrqHandler &rArr; _Drv_MccSingleCodeDiskExtiIrqHandler &rArr; Drv_StepmotorMoveSdBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[6c]"></a>Drv_Mcc1ResetExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc1ResetExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc1ResetExtiIrqHandler &rArr; _Drv_MccResetExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[6e]"></a>Drv_Mcc1StrikeExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc1StrikeExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Drv_Mcc1StrikeExtiIrqHandler &rArr; _Drv_MccStrikeExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccStrikeExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[70]"></a>Drv_Mcc2CodeDiskExtiIrqHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc2CodeDiskExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc2CodeDiskExtiIrqHandler &rArr; _Drv_MccSingleCodeDiskExtiIrqHandler &rArr; Drv_StepmotorMoveSdBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[6f]"></a>Drv_Mcc2ResetExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc2ResetExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc2ResetExtiIrqHandler &rArr; _Drv_MccResetExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[71]"></a>Drv_Mcc2StrikeExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc2StrikeExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Drv_Mcc2StrikeExtiIrqHandler &rArr; _Drv_MccStrikeExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccStrikeExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[73]"></a>Drv_Mcc3CodeDiskExtiIrqHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc3CodeDiskExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc3CodeDiskExtiIrqHandler &rArr; _Drv_MccSingleCodeDiskExtiIrqHandler &rArr; Drv_StepmotorMoveSdBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[72]"></a>Drv_Mcc3ResetExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc3ResetExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc3ResetExtiIrqHandler &rArr; _Drv_MccResetExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[74]"></a>Drv_Mcc3StrikeExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc3StrikeExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Drv_Mcc3StrikeExtiIrqHandler &rArr; _Drv_MccStrikeExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccStrikeExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[76]"></a>Drv_Mcc4CodeDiskExtiIrqHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc4CodeDiskExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc4CodeDiskExtiIrqHandler &rArr; _Drv_MccSingleCodeDiskExtiIrqHandler &rArr; Drv_StepmotorMoveSdBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[75]"></a>Drv_Mcc4ResetExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc4ResetExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc4ResetExtiIrqHandler &rArr; _Drv_MccResetExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[77]"></a>Drv_Mcc4StrikeExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc4StrikeExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Drv_Mcc4StrikeExtiIrqHandler &rArr; _Drv_MccStrikeExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccStrikeExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[79]"></a>Drv_Mcc5CodeDiskExtiIrqHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc5CodeDiskExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc5CodeDiskExtiIrqHandler &rArr; _Drv_MccSingleCodeDiskExtiIrqHandler &rArr; Drv_StepmotorMoveSdBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[78]"></a>Drv_Mcc5ResetExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc5ResetExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc5ResetExtiIrqHandler &rArr; _Drv_MccResetExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[7a]"></a>Drv_Mcc5StrikeExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc5StrikeExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Drv_Mcc5StrikeExtiIrqHandler &rArr; _Drv_MccStrikeExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccStrikeExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[7c]"></a>Drv_Mcc6CodeDiskExtiIrqHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc6CodeDiskExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc6CodeDiskExtiIrqHandler &rArr; _Drv_MccSingleCodeDiskExtiIrqHandler &rArr; Drv_StepmotorMoveSdBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[7b]"></a>Drv_Mcc6ResetExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc6ResetExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc6ResetExtiIrqHandler &rArr; _Drv_MccResetExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[7d]"></a>Drv_Mcc6StrikeExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc6StrikeExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Drv_Mcc6StrikeExtiIrqHandler &rArr; _Drv_MccStrikeExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccStrikeExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[7f]"></a>Drv_Mcc7CodeDiskExtiIrqHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc7CodeDiskExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc7CodeDiskExtiIrqHandler &rArr; _Drv_MccSingleCodeDiskExtiIrqHandler &rArr; Drv_StepmotorMoveSdBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[7e]"></a>Drv_Mcc7ResetExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc7ResetExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc7ResetExtiIrqHandler &rArr; _Drv_MccResetExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[80]"></a>Drv_Mcc7StrikeExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc7StrikeExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Drv_Mcc7StrikeExtiIrqHandler &rArr; _Drv_MccStrikeExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccStrikeExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[82]"></a>Drv_Mcc8CodeDiskExtiIrqHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc8CodeDiskExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc8CodeDiskExtiIrqHandler &rArr; _Drv_MccSingleCodeDiskExtiIrqHandler &rArr; Drv_StepmotorMoveSdBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[81]"></a>Drv_Mcc8ResetExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc8ResetExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc8ResetExtiIrqHandler &rArr; _Drv_MccResetExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[83]"></a>Drv_Mcc8StrikeExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc8StrikeExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Drv_Mcc8StrikeExtiIrqHandler &rArr; _Drv_MccStrikeExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccStrikeExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[85]"></a>Drv_Mcc9CodeDiskExtiIrqHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc9CodeDiskExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc9CodeDiskExtiIrqHandler &rArr; _Drv_MccSingleCodeDiskExtiIrqHandler &rArr; Drv_StepmotorMoveSdBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[84]"></a>Drv_Mcc9ResetExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc9ResetExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_Mcc9ResetExtiIrqHandler &rArr; _Drv_MccResetExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[86]"></a>Drv_Mcc9StrikeExtiIrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.Drv_Mcc9StrikeExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Drv_Mcc9StrikeExtiIrqHandler &rArr; _Drv_MccStrikeExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccStrikeExtiIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motion_control_components.o(i.Drv_MccCreate)
</UL>
<P><STRONG><a name="[10e]"></a>Drv_MccCalcSubdivisionStep</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, drv_motion_control_components.o(i.Drv_MccCalcSubdivisionStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Drv_MccCalcSubdivisionStep &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetPresetLocation
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
</UL>

<P><STRONG><a name="[113]"></a>Drv_MccCreate</STRONG> (Thumb, 1924 bytes, Stack size 80 bytes, drv_motion_control_components.o(i.Drv_MccCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Drv_MccCreate &rArr; Drv_StepmotorCreate &rArr; Drv_StepmotorCalcMotorFre &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitSoftwareInterrupt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPinInterrupt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCreate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCalcSubdivisionStep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_4_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1_Init
</UL>

<P><STRONG><a name="[119]"></a>Drv_MccMoveSynchronizingStep</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, drv_motion_control_components.o(i.Drv_MccMoveSynchronizingStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Drv_MccMoveSynchronizingStep &rArr; _Drv_MccMoveSubdivisionStep &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_4_MoveForward
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_4_MoveBackward
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_3_MoveForward
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_3_MoveBackward
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_2_MoveForward
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_2_MoveBackward
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_1_MoveForward
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_1_MoveBackward
</UL>

<P><STRONG><a name="[143]"></a>Drv_MccSetCompensation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_motion_control_components.o(i.Drv_MccSetCompensation))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_4_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1_Init
</UL>

<P><STRONG><a name="[11b]"></a>Drv_MccSetPresetLocation</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, drv_motion_control_components.o(i.Drv_MccSetPresetLocation))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Drv_MccSetPresetLocation &rArr; Drv_MccCalcSubdivisionStep &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCalcSubdivisionStep
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_4_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1_Init
</UL>

<P><STRONG><a name="[11d]"></a>Drv_MccSetStepmotorLine5</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, drv_motion_control_components.o(i.Drv_MccSetStepmotorLine5))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Drv_MccSetStepmotorLine5 &rArr; Drv_StepmotorCalcMotorFre5 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_4_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1_Init
</UL>

<P><STRONG><a name="[109]"></a>Drv_PwmPinCreate</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, drv_pwm_pin.o(i.Drv_PwmPinCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Drv_PwmPinCreate &rArr; calloc &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LedCreate
</UL>

<P><STRONG><a name="[121]"></a>Drv_PwmTimerDrivenConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_PwmTimerDrivenConfig &rArr; Hal_SetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorDrv
</UL>

<P><STRONG><a name="[123]"></a>Drv_PwmTimerDrivenCreate</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Drv_PwmTimerDrivenCreate &rArr; calloc &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WritePin
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCreate
</UL>

<P><STRONG><a name="[125]"></a>Drv_PwmTimerDrivenDisable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Drv_PwmTimerDrivenDisable &rArr; Hal_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_DisTimer
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorMoveUpdate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorDrv
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDrivenUpdate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorStop
</UL>

<P><STRONG><a name="[127]"></a>Drv_PwmTimerDrivenEnable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drv_PwmTimerDrivenEnable &rArr; Hal_EnTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_EnTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorDrv
</UL>

<P><STRONG><a name="[129]"></a>Drv_StepmotorCalcMotorFre</STRONG> (Thumb, 418 bytes, Stack size 104 bytes, drv_stepmotor.o(i.Drv_StepmotorCalcMotorFre))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Drv_StepmotorCalcMotorFre &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCreate
</UL>

<P><STRONG><a name="[11e]"></a>Drv_StepmotorCalcMotorFre5</STRONG> (Thumb, 4906 bytes, Stack size 280 bytes, drv_stepmotor.o(i.Drv_StepmotorCalcMotorFre5))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Drv_StepmotorCalcMotorFre5 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetStepmotorLine5
</UL>

<P><STRONG><a name="[114]"></a>Drv_StepmotorCreate</STRONG> (Thumb, 602 bytes, Stack size 40 bytes, drv_stepmotor.o(i.Drv_StepmotorCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Drv_StepmotorCreate &rArr; Drv_StepmotorCalcMotorFre &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WritePin
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPin
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorCallocMotorFre
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorCallocLadstep
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenCreate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
</UL>

<P><STRONG><a name="[13a]"></a>Drv_StepmotorMoveRlBegin</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, drv_stepmotor.o(i.Drv_StepmotorMoveRlBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WritePin
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorDrv
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccStrikeExtiIrqHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>

<P><STRONG><a name="[13c]"></a>Drv_StepmotorMoveSdBegin</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, drv_stepmotor.o(i.Drv_StepmotorMoveSdBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Drv_StepmotorMoveSdBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WritePin
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorDrv
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorConfigSd
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
</UL>

<P><STRONG><a name="[13e]"></a>Drv_StepmotorMoveSpBegin</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, drv_stepmotor.o(i.Drv_StepmotorMoveSpBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Drv_StepmotorMoveSpBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WritePin
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorDrv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorConfigSp
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
</UL>

<P><STRONG><a name="[140]"></a>Drv_StepmotorStop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drv_stepmotor.o(i.Drv_StepmotorStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_StepmotorStop &rArr; Drv_PwmTimerDrivenDisable &rArr; Hal_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccStrikeExtiIrqHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>

<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, hal_gpio.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, hal_gpio.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitSoftwareInterrupt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPinInterrupt
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>EXTI_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitSoftwareInterrupt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPinInterrupt
</UL>

<P><STRONG><a name="[a9]"></a>Func_1_Init</STRONG> (Thumb, 2132 bytes, Stack size 104 bytes, func_1.o(i.Func_1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = Func_1_Init &rArr; Drv_MccSetStepmotorLine5 &rArr; Drv_StepmotorCalcMotorFre5 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetStepmotorLine5
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetPresetLocation
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetCompensation
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditAddNode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[ae]"></a>Func_1_Resident</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, func_1.o(i.Func_1_Resident))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Func_1_Resident &rArr; Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[aa]"></a>Func_2_Init</STRONG> (Thumb, 792 bytes, Stack size 168 bytes, func_2.o(i.Func_2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = Func_2_Init &rArr; Drv_MccSetStepmotorLine5 &rArr; Drv_StepmotorCalcMotorFre5 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetStepmotorLine5
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetPresetLocation
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetCompensation
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditAddNode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[af]"></a>Func_2_Resident</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, func_2.o(i.Func_2_Resident))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Func_2_Resident &rArr; Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[ab]"></a>Func_3_Init</STRONG> (Thumb, 792 bytes, Stack size 168 bytes, func_3.o(i.Func_3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = Func_3_Init &rArr; Drv_MccSetStepmotorLine5 &rArr; Drv_StepmotorCalcMotorFre5 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetStepmotorLine5
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetPresetLocation
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetCompensation
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditAddNode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[b0]"></a>Func_3_Resident</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, func_3.o(i.Func_3_Resident))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Func_3_Resident &rArr; Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[ac]"></a>Func_4_Init</STRONG> (Thumb, 2130 bytes, Stack size 104 bytes, func_4.o(i.Func_4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = Func_4_Init &rArr; Drv_MccSetStepmotorLine5 &rArr; Drv_StepmotorCalcMotorFre5 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetStepmotorLine5
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetPresetLocation
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetCompensation
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditAddNode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[b1]"></a>Func_4_Resident</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, func_4.o(i.Func_4_Resident))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Func_4_Resident &rArr; Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[146]"></a>Func_Init</STRONG> (Thumb, 192 bytes, Stack size 96 bytes, func_common.o(i.Func_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Func_Init &rArr; Drv_CanInterfaceCreate &rArr; Osal_ThreadCreate &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LedCreate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_CanInterfaceCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[150]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPinInterrupt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPin
</UL>

<P><STRONG><a name="[14f]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
</UL>

<P><STRONG><a name="[169]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_ReadPin
</UL>

<P><STRONG><a name="[157]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPinInterrupt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPin
</UL>

<P><STRONG><a name="[170]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WritePin
</UL>

<P><STRONG><a name="[147]"></a>Hal_CanTx</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, hal_can.o(i.Hal_CanTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Hal_CanTx &rArr; CAN_TransmitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfacePutFrame
</UL>

<P><STRONG><a name="[126]"></a>Hal_DisTimer</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, hal_timer.o(i.Hal_DisTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_DisTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenDisable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmPinPwm
</UL>

<P><STRONG><a name="[128]"></a>Hal_EnTimer</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hal_timer.o(i.Hal_EnTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_EnTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenEnable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmPinPwm
</UL>

<P><STRONG><a name="[1e5]"></a>Hal_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_chip.o(i.Hal_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[104]"></a>Hal_InitCan10ChInterrupt</STRONG> (Thumb, 1520 bytes, Stack size 80 bytes, hal_can.o(i.Hal_InitCan10ChInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Hal_InitCan10ChInterrupt &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_CanInterfaceCreate
</UL>

<P><STRONG><a name="[120]"></a>Hal_InitPin</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, hal_gpio.o(i.Hal_InitPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Hal_InitPin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenCreate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmPinCreate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCreate
</UL>

<P><STRONG><a name="[117]"></a>Hal_InitPinInterrupt</STRONG> (Thumb, 506 bytes, Stack size 56 bytes, hal_gpio.o(i.Hal_InitPinInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Hal_InitPinInterrupt &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
</UL>

<P><STRONG><a name="[118]"></a>Hal_InitSoftwareInterrupt</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, hal_gpio.o(i.Hal_InitSoftwareInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Hal_InitSoftwareInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
</UL>

<P><STRONG><a name="[1e6]"></a>Hal_InitSysTick</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hal_chip.o(i.Hal_InitSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_InitSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11f]"></a>Hal_InitTimerInterrupt</STRONG> (Thumb, 1192 bytes, Stack size 40 bytes, hal_timer.o(i.Hal_InitTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Hal_InitTimerInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenCreate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmPinCreate
</UL>

<P><STRONG><a name="[162]"></a>Hal_InitUartInterrupt</STRONG> (Thumb, 784 bytes, Stack size 72 bytes, hal_uart.o(i.Hal_InitUartInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Hal_InitUartInterrupt &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockStructInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rti_board_start
</UL>

<P><STRONG><a name="[168]"></a>Hal_ReadPin</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_gpio.o(i.Hal_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccSingleCodeDiskExtiIrqHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccResetExtiIrqHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccCodeDiskExtiIrqHandler
</UL>

<P><STRONG><a name="[1c6]"></a>Hal_Reboot</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_chip.o(i.Hal_Reboot))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
</UL>

<P><STRONG><a name="[122]"></a>Hal_SetTimer</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, hal_timer.o(i.Hal_SetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_SetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmPinPwm
</UL>

<P><STRONG><a name="[16b]"></a>Hal_UartGetByte</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hal_uart.o(i.Hal_UartGetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_UartGetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_shell_get
</UL>

<P><STRONG><a name="[16d]"></a>Hal_UartSendByte</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, hal_uart.o(i.Hal_UartSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_UartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[124]"></a>Hal_WritePin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hal_gpio.o(i.Hal_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorDrv
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenDisable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenCreate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDrivenUpdate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveSpBegin
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveSdBegin
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveRlBegin
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCreate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmPinIrqHandler
</UL>

<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[152]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitSoftwareInterrupt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPinInterrupt
</UL>

<P><STRONG><a name="[151]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPinInterrupt
</UL>

<P><STRONG><a name="[145]"></a>Osal_Delayms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osal.o(i.Osal_Delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_4_Resident
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_3_Resident
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2_Resident
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1_Resident
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_TaskCheck
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskResident4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskResident3
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskResident2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskResident1
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdTransceiver
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler1
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCheck
</UL>

<P><STRONG><a name="[172]"></a>Osal_DeleteThread</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, osal.o(i.Osal_DeleteThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Osal_DeleteThread &rArr; rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_TaskStart
</UL>

<P><STRONG><a name="[191]"></a>Osal_GetIntoThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, osal.o(i.Osal_GetIntoThread))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_TaskStart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskResident4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskResident3
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskResident2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskResident1
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdTransceiver
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler1
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCheck
</UL>

<P><STRONG><a name="[1e7]"></a>Osal_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, osal.o(i.Osal_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[105]"></a>Osal_MailCreate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, osal.o(i.Osal_MailCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Osal_MailCreate &rArr; rt_mb_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_CanInterfaceCreate
</UL>

<P><STRONG><a name="[176]"></a>Osal_MailRecv</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, osal.o(i.Osal_MailRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Osal_MailRecv &rArr; rt_mb_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_TaskCanIsr
</UL>

<P><STRONG><a name="[178]"></a>Osal_MailSend</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, osal.o(i.Osal_MailSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Osal_MailSend &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanRxIrqHandler
</UL>

<P><STRONG><a name="[116]"></a>Osal_SemCreate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, osal.o(i.Osal_SemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Osal_SemCreate &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_TaskStart
</UL>

<P><STRONG><a name="[17b]"></a>Osal_SemPend</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, osal.o(i.Osal_SemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Osal_SemPend &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler1
</UL>

<P><STRONG><a name="[17d]"></a>Osal_SemPost</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, osal.o(i.Osal_SemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_StepmotorDone
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_Id4RxDone
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_Id3RxDone
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_Id2RxDone
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_Id1RxDone
</UL>

<P><STRONG><a name="[17f]"></a>Osal_ShowVersion</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, osal.o(i.Osal_ShowVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Osal_ShowVersion &rArr; cd_Osal_ShowVersion &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd_Osal_ShowVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rti_board_start
</UL>

<P><STRONG><a name="[182]"></a>Osal_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, osal.o(i.Osal_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Osal_Start &rArr; rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[107]"></a>Osal_ThreadCreate</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, osal.o(i.Osal_ThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Osal_ThreadCreate &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_CanInterfaceCreate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_TaskStart
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[14d]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPinInterrupt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPin
</UL>

<P><STRONG><a name="[14e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitCan10ChInterrupt
</UL>

<P><STRONG><a name="[101]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[158]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPinInterrupt
</UL>

<P><STRONG><a name="[194]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[198]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[159]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitPinInterrupt
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[144]"></a>Sys_CmdRegeditAddNode</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sys_cmd_regedit.o(i.Sys_CmdRegeditAddNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Sys_CmdRegeditAddNode &rArr; Sys_DoubleListNodeAdd &rArr; _Sys_DoubleListNodeCreate &rArr; calloc &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DoubleListNodeAdd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_CmdRegeditNobeCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_4_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1_Init
</UL>

<P><STRONG><a name="[188]"></a>Sys_CmdRegeditCreate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sys_cmd_regedit.o(i.Sys_CmdRegeditCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Sys_CmdRegeditCreate &rArr; Sys_DoubleListCreate &rArr; free &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DoubleListCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler1
</UL>

<P><STRONG><a name="[18b]"></a>Sys_CmdRegeditForeach</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sys_cmd_regedit.o(i.Sys_CmdRegeditForeach))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_CmdRegeditForeach
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdScheduler
</UL>

<P><STRONG><a name="[18a]"></a>Sys_CmdScheduler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sys_cmd_scheduler.o(i.Sys_CmdScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sys_CmdScheduler &rArr; Sys_CmdRegeditForeach
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditForeach
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_TaskCmdScheduler1
</UL>

<P><STRONG><a name="[189]"></a>Sys_DoubleListCreate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sys_double_list.o(i.Sys_DoubleListCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Sys_DoubleListCreate &rArr; free &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditCreate
</UL>

<P><STRONG><a name="[187]"></a>Sys_DoubleListNodeAdd</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, sys_double_list.o(i.Sys_DoubleListNodeAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Sys_DoubleListNodeAdd &rArr; _Sys_DoubleListNodeCreate &rArr; calloc &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_DoubleListNodeGet
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_DoubleListNodeCreate
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_DoubleListLen
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_DoubleListAndDataCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditAddNode
</UL>

<P><STRONG><a name="[190]"></a>Sys_Init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_tasks.o(i.Sys_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Sys_Init &rArr; Osal_ThreadCreate &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_ThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b7]"></a>Sys_TaskStart</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, sys_tasks.o(i.Sys_TaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Sys_TaskStart &rArr; Osal_ThreadCreate &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_ThreadCreate
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemCreate
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_GetIntoThread
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_DeleteThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_tasks.o(i.Sys_Init)
</UL>
<P><STRONG><a name="[1f3]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_timer.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_timer.o(i.TIM1_TRG_COM_TIM11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM1_TRG_COM_TIM11_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hal_timer.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM5_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_timer.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_timer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM7_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_timer.o(i.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_timer.o(i.TIM8_TRG_COM_TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM8_TRG_COM_TIM14_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hal_timer.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[15e]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
</UL>

<P><STRONG><a name="[160]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
</UL>

<P><STRONG><a name="[14b]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM11_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_DisTimer
</UL>

<P><STRONG><a name="[14a]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_EnTimer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_DisTimer
</UL>

<P><STRONG><a name="[15b]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
</UL>

<P><STRONG><a name="[193]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM11_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
</UL>

<P><STRONG><a name="[15f]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectOutputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
</UL>

<P><STRONG><a name="[16a]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SetTimer
</UL>

<P><STRONG><a name="[14c]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_DisTimer
</UL>

<P><STRONG><a name="[15d]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
</UL>

<P><STRONG><a name="[15c]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitTimerInterrupt
</UL>

<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hal_uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hal_uart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hal_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hal_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>$Super$$USART3_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hal_uart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = $Super$$USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>USART6_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hal_uart.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART6_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$USART3_IRQHandler
</UL>

<P><STRONG><a name="[197]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$USART3_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
</UL>

<P><STRONG><a name="[163]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClockStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
</UL>

<P><STRONG><a name="[166]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
</UL>

<P><STRONG><a name="[16f]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_UartSendByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$USART3_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$USART3_IRQHandler
</UL>

<P><STRONG><a name="[167]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
</UL>

<P><STRONG><a name="[165]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
</UL>

<P><STRONG><a name="[16c]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_UartGetByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$USART3_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_UartSendByte
</UL>

<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1ae]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[19f]"></a>__Drv_PwmTimerDrivenDone</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, drv_stepmotor.o(i.__Drv_PwmTimerDrivenDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __Drv_PwmTimerDrivenDone &rArr; _Drv_StepmotorMoveUpdate &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorMoveUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven9IrqHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven8IrqHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven7IrqHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven6IrqHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven5IrqHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven4IrqHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven3IrqHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven2IrqHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven1IrqHandler
</UL>

<P><STRONG><a name="[1a3]"></a>__Drv_StepmotorDone</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, drv_motion_control_components.o(i.__Drv_StepmotorDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorDrv
</UL>

<P><STRONG><a name="[136]"></a>__hardfp_acos</STRONG> (Thumb, 738 bytes, Stack size 72 bytes, acos.o(i.__hardfp_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __hardfp_acos &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
</UL>

<P><STRONG><a name="[137]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
</UL>

<P><STRONG><a name="[12b]"></a>__hardfp_exp</STRONG> (Thumb, 714 bytes, Stack size 72 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
</UL>

<P><STRONG><a name="[135]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
</UL>

<P><STRONG><a name="[132]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __hardfp_round &rArr; _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
</UL>

<P><STRONG><a name="[134]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
</UL>

<P><STRONG><a name="[1a9]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1ab]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1a7]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[1aa]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1b0]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a5]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[1af]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a6]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[1ac]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[1ad]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[20c]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[103]"></a>calloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, osal.o(i.calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = calloc &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorCallocMotorFre
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorCallocLadstep
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenCreate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmPinCreate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCreate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_CanInterfaceCreate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_DoubleListNodeCreate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DoubleListCreate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Sys_CmdRegeditNobeCreate
</UL>

<P><STRONG><a name="[181]"></a>cd_Osal_ShowVersion</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, func_common.o(i.cd_Osal_ShowVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cd_Osal_ShowVersion &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_ShowVersion
</UL>

<P><STRONG><a name="[da]"></a>cmd_free</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cmd_free &rArr; list_mem &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[d9]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[1b1]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c7]"></a>finsh_get_prompt</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_get_prompt &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[1cf]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shell.o(i.finsh_set_prompt_mode))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1cd]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[cb]"></a>finsh_system_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[c4]"></a>finsh_thread_entry</STRONG> (Thumb, 1250 bytes, Stack size 0 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = finsh_thread_entry &rArr; msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[106]"></a>free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osal.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = free &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCreate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_CanInterfaceCreate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DoubleListCreate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditCreate
</UL>

<P><STRONG><a name="[ce]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[d7]"></a>list</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cmd.o(i.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[d2]"></a>list_event</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[d4]"></a>list_mailbox</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[cd]"></a>list_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mem.o(i.list_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(FSymTab)
</UL>
<P><STRONG><a name="[d5]"></a>list_msgqueue</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[d3]"></a>list_mutex</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[d1]"></a>list_sem</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[d0]"></a>list_thread</STRONG> (Thumb, 294 bytes, Stack size 248 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[d6]"></a>list_timer</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1e4]"></a>$Super$$main</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = $Super$$main &rArr; Func_Init &rArr; Drv_CanInterfaceCreate &rArr; Osal_ThreadCreate &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitSysTick
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Start
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[c5]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; Func_Init &rArr; Drv_CanInterfaceCreate &rArr; Osal_ThreadCreate &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[1e9]"></a>msh_auto_complete</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, msh.o(i.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[1d6]"></a>msh_exec</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, msh.o(i.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[d8]"></a>msh_help</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, msh.o(i.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[1c8]"></a>msh_is_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(i.msh_is_used))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[1ec]"></a>rt_application_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c5]"></a>rt_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mem.o(i.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[1f5]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1e8]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[1ee]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[1ef]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[1d7]"></a>rt_free</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[1f7]"></a>rt_heap_begin_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_begin_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1f6]"></a>rt_heap_end_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_end_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1f2]"></a>rt_hw_board_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysTick_Config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_end_get
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_begin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1cc]"></a>rt_hw_console_getchar</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, osal.o(i.rt_hw_console_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_hw_console_getchar &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[1f9]"></a>rt_hw_console_output</STRONG> (Thumb, 70 bytes, Stack size 120 bytes, osal.o(i.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_UartSendByte
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[ee]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1bc]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[fb]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fd]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[180]"></a>rt_kprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_ShowVersion
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd_Osal_ShowVersion
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_show_can
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[1ed]"></a>rt_malloc</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>

<P><STRONG><a name="[175]"></a>rt_mb_create</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_mb_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MailCreate
</UL>

<P><STRONG><a name="[177]"></a>rt_mb_recv</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, ipc.o(i.rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_mb_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MailRecv
</UL>

<P><STRONG><a name="[179]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MailSend
</UL>

<P><STRONG><a name="[207]"></a>rt_mb_send_wait</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, ipc.o(i.rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[1d4]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1bb]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>

<P><STRONG><a name="[202]"></a>rt_object_allocate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[203]"></a>rt_object_delete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[20a]"></a>rt_object_detach</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1e2]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>

<P><STRONG><a name="[20b]"></a>rt_object_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[21a]"></a>rt_object_is_systemobject</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1f0]"></a>rt_schedule</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</UL>

<P><STRONG><a name="[20f]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[210]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[17a]"></a>rt_sem_create</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemCreate
</UL>

<P><STRONG><a name="[1ce]"></a>rt_sem_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[17e]"></a>rt_sem_release</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPost
</UL>

<P><STRONG><a name="[17c]"></a>rt_sem_take</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPend
</UL>

<P><STRONG><a name="[211]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[115]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, kservice.o(i.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCreate
</UL>

<P><STRONG><a name="[1eb]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[1f8]"></a>rt_system_heap_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[213]"></a>rt_system_scheduler_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[215]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[217]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[228]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[183]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_ThreadCreate
</UL>

<P><STRONG><a name="[174]"></a>rt_thread_delete</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_DeleteThread
</UL>

<P><STRONG><a name="[c2]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[21b]"></a>rt_thread_idle_excute</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[21c]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[21d]"></a>rt_thread_init</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[171]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>

<P><STRONG><a name="[1fb]"></a>rt_thread_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>

<P><STRONG><a name="[173]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_DeleteThread
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[21f]"></a>rt_thread_sleep</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[184]"></a>rt_thread_startup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_ThreadCreate
</UL>

<P><STRONG><a name="[1fd]"></a>rt_thread_suspend</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[c3]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[222]"></a>rt_thread_yield</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[21e]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[1e3]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[185]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[223]"></a>rt_timer_check</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[204]"></a>rt_timer_control</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_control
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[218]"></a>rt_timer_detach</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[1bd]"></a>rt_timer_init</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[205]"></a>rt_timer_start</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[221]"></a>rt_timer_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[201]"></a>rt_vsnprintf</STRONG> (Thumb, 824 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[212]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(i.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[c9]"></a>rti_board_start</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, osal.o(i.rti_board_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rti_board_start &rArr; Osal_ShowVersion &rArr; cd_Osal_ShowVersion &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_InitUartInterrupt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_ShowVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[fe]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[cf]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[12c]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[274]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[275]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[276]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[277]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[278]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[12e]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[22a]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[22e]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[234]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCalcSubdivisionStep
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_4_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[230]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCalcSubdivisionStep
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[231]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_4_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1_Init
</UL>

<P><STRONG><a name="[232]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_4_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[279]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[10f]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCalcSubdivisionStep
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[27a]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[233]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[237]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCalcSubdivisionStep
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_MccMoveSubdivisionStep
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_4_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[235]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[22d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[22c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccSetPresetLocation
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[236]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[1b3]"></a>_drnd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, drnd.o(x$fpl$drnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[238]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1b4]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[23a]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCalcMotorFre
</UL>

<P><STRONG><a name="[23b]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[23c]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[e2]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[27b]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[27c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[22f]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1b2]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[23d]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ca]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[cc]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[c8]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[c6]"></a>rt_thread_idle_entry</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[1fa]"></a>rt_ipc_list_resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[1fc]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[1ff]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[200]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[1fe]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[206]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[227]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 60 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[226]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1f1]"></a>plug_holes</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[208]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[209]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[1b8]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[214]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[1ba]"></a>_rt_thread_init</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[1c2]"></a>_thread_cleanup_execute</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i._thread_cleanup_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thread_cleanup_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[219]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[220]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[1be]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[1c0]"></a>_rt_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[1bf]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[224]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[225]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1c1]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[1dc]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cmd.o(i.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[1de]"></a>list_get_next</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cmd.o(i.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[1dd]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[1df]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[1e0]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[1e1]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(i.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[1b5]"></a>_msh_exec_cmd</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, msh.o(i._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[1b6]"></a>msh_get_cmd</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[1b7]"></a>msh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, msh.o(i.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[1ea]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msh.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[1cb]"></a>finsh_getchar</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = finsh_getchar &rArr; rt_hw_console_getchar &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1d3]"></a>shell_auto_complete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1d2]"></a>shell_handle_history</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell.o(i.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1d5]"></a>shell_push_history</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, shell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_push_history &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[c7]"></a>_shell_get</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, osal.o(i._shell_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _shell_get &rArr; Hal_UartGetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_UartGetByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal.o(i.rti_board_start)
</UL>
<P><STRONG><a name="[19a]"></a>_Drv_CanInterfaceBufferFormatting</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_can_interface.o(i._Drv_CanInterfaceBufferFormatting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Drv_CanInterfaceBufferFormatting
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceGetFrame
</UL>

<P><STRONG><a name="[199]"></a>_Drv_CanInterfaceGetFrame</STRONG> (Thumb, 1338 bytes, Stack size 32 bytes, drv_can_interface.o(i._Drv_CanInterfaceGetFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _Drv_CanInterfaceGetFrame &rArr; _Drv_CanInterfaceSendResponseToBuffer &rArr; _Drv_CanInterfaceSendToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendResponseToBuffer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendErrorToBuffer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceRxBufferFree
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceBufferFormatting
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_TaskCanIsr
</UL>

<P><STRONG><a name="[69]"></a>_Drv_CanInterfaceGetMsg</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, drv_can_interface.o(i._Drv_CanInterfaceGetMsg))
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[60]"></a>_Drv_CanInterfaceModeChoose</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, drv_can_interface.o(i._Drv_CanInterfaceModeChoose))
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[66]"></a>_Drv_CanInterfacePutFrame</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, drv_can_interface.o(i._Drv_CanInterfacePutFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Drv_CanInterfacePutFrame &rArr; Hal_CanTx &rArr; CAN_TransmitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_CanTx
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceTxBufferFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[68]"></a>_Drv_CanInterfaceRxBufferFree</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, drv_can_interface.o(i._Drv_CanInterfaceRxBufferFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Drv_CanInterfaceRxBufferFree
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceRxTimeOutCheck
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceGetFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[67]"></a>_Drv_CanInterfaceRxTimeOutCheck</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, drv_can_interface.o(i._Drv_CanInterfaceRxTimeOutCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Drv_CanInterfaceRxTimeOutCheck &rArr; _Drv_CanInterfaceSendErrorToBuffer &rArr; _Drv_CanInterfaceSendToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendErrorToBuffer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceRxBufferFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[61]"></a>_Drv_CanInterfaceSendCmdToBuffer</STRONG> (Thumb, 96 bytes, Stack size 192 bytes, drv_can_interface.o(i._Drv_CanInterfaceSendCmdToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _Drv_CanInterfaceSendCmdToBuffer &rArr; _Drv_CanInterfaceSendToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendToBuffer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[64]"></a>_Drv_CanInterfaceSendDoneToBuffer</STRONG> (Thumb, 94 bytes, Stack size 184 bytes, drv_can_interface.o(i._Drv_CanInterfaceSendDoneToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _Drv_CanInterfaceSendDoneToBuffer &rArr; _Drv_CanInterfaceSendToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendToBuffer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[63]"></a>_Drv_CanInterfaceSendErrorToBuffer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_can_interface.o(i._Drv_CanInterfaceSendErrorToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Drv_CanInterfaceSendErrorToBuffer &rArr; _Drv_CanInterfaceSendToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanRxIrqHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceRxTimeOutCheck
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceGetFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[65]"></a>_Drv_CanInterfaceSendFailedToBuffer</STRONG> (Thumb, 94 bytes, Stack size 184 bytes, drv_can_interface.o(i._Drv_CanInterfaceSendFailedToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _Drv_CanInterfaceSendFailedToBuffer &rArr; _Drv_CanInterfaceSendToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendToBuffer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[62]"></a>_Drv_CanInterfaceSendResponseToBuffer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_can_interface.o(i._Drv_CanInterfaceSendResponseToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Drv_CanInterfaceSendResponseToBuffer &rArr; _Drv_CanInterfaceSendToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceGetFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[19d]"></a>_Drv_CanInterfaceSendToBuffer</STRONG> (Thumb, 1382 bytes, Stack size 24 bytes, drv_can_interface.o(i._Drv_CanInterfaceSendToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Drv_CanInterfaceSendToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendResponseToBuffer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendFailedToBuffer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendErrorToBuffer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendDoneToBuffer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendCmdToBuffer
</UL>

<P><STRONG><a name="[19b]"></a>_Drv_CanInterfaceTxBufferFree</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, drv_can_interface.o(i._Drv_CanInterfaceTxBufferFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Drv_CanInterfaceTxBufferFree
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfacePutFrame
</UL>

<P><STRONG><a name="[6a]"></a>_Drv_CanRxIrqHandler</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, drv_can_interface.o(i._Drv_CanRxIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _Drv_CanRxIrqHandler &rArr; Osal_MailSend &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceSendErrorToBuffer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MailSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[6b]"></a>_Drv_TaskCanIsr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_can_interface.o(i._Drv_TaskCanIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Drv_TaskCanIsr &rArr; Osal_MailRecv &rArr; rt_mb_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_CanInterfaceGetFrame
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MailRecv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_interface.o(i.Drv_CanInterfaceCreate)
</UL>
<P><STRONG><a name="[10b]"></a>_Drv_MccCodeDiskExtiIrqHandler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, drv_motion_control_components.o(i._Drv_MccCodeDiskExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _Drv_MccCodeDiskExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_ReadPin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorStop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveRlBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc9CodeDiskExtiIrqHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc8CodeDiskExtiIrqHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc7CodeDiskExtiIrqHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc6CodeDiskExtiIrqHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc5CodeDiskExtiIrqHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc4CodeDiskExtiIrqHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc3CodeDiskExtiIrqHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc2CodeDiskExtiIrqHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc1CodeDiskExtiIrqHandler
</UL>

<P><STRONG><a name="[11a]"></a>_Drv_MccMoveSubdivisionStep</STRONG> (Thumb, 1072 bytes, Stack size 104 bytes, drv_motion_control_components.o(i._Drv_MccMoveSubdivisionStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _Drv_MccMoveSubdivisionStep &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_ReadPin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorStop
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveSpBegin
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveRlBegin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccCalcSubdivisionStep
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPend
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccMoveSynchronizingStep
</UL>

<P><STRONG><a name="[10c]"></a>_Drv_MccResetExtiIrqHandler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, drv_motion_control_components.o(i._Drv_MccResetExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _Drv_MccResetExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_ReadPin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorStop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveRlBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc9ResetExtiIrqHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc8ResetExtiIrqHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc7ResetExtiIrqHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc6ResetExtiIrqHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc5ResetExtiIrqHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc4ResetExtiIrqHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc3ResetExtiIrqHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc2ResetExtiIrqHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc1ResetExtiIrqHandler
</UL>

<P><STRONG><a name="[10a]"></a>_Drv_MccSingleCodeDiskExtiIrqHandler</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, drv_motion_control_components.o(i._Drv_MccSingleCodeDiskExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _Drv_MccSingleCodeDiskExtiIrqHandler &rArr; Drv_StepmotorMoveSdBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_ReadPin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorStop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveSdBegin
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveRlBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc9CodeDiskExtiIrqHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc8CodeDiskExtiIrqHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc7CodeDiskExtiIrqHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc6CodeDiskExtiIrqHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc5CodeDiskExtiIrqHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc4CodeDiskExtiIrqHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc3CodeDiskExtiIrqHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc2CodeDiskExtiIrqHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc1CodeDiskExtiIrqHandler
</UL>

<P><STRONG><a name="[10d]"></a>_Drv_MccStrikeExtiIrqHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_motion_control_components.o(i._Drv_MccStrikeExtiIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _Drv_MccStrikeExtiIrqHandler &rArr; Drv_StepmotorMoveRlBegin &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorStop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveRlBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc9StrikeExtiIrqHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc8StrikeExtiIrqHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc7StrikeExtiIrqHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc6StrikeExtiIrqHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc5StrikeExtiIrqHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc4StrikeExtiIrqHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc3StrikeExtiIrqHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc2StrikeExtiIrqHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Mcc1StrikeExtiIrqHandler
</UL>

<P><STRONG><a name="[8c]"></a>_Drv_PwmTimerDriven1IrqHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven1IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Drv_PwmTimerDriven1IrqHandler &rArr; __Drv_PwmTimerDrivenDone &rArr; _Drv_StepmotorMoveUpdate &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_PwmTimerDrivenDone
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDrivenUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
</UL>
<P><STRONG><a name="[8d]"></a>_Drv_PwmTimerDriven2IrqHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven2IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Drv_PwmTimerDriven2IrqHandler &rArr; __Drv_PwmTimerDrivenDone &rArr; _Drv_StepmotorMoveUpdate &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_PwmTimerDrivenDone
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDrivenUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
</UL>
<P><STRONG><a name="[8e]"></a>_Drv_PwmTimerDriven3IrqHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven3IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Drv_PwmTimerDriven3IrqHandler &rArr; __Drv_PwmTimerDrivenDone &rArr; _Drv_StepmotorMoveUpdate &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_PwmTimerDrivenDone
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDrivenUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
</UL>
<P><STRONG><a name="[8f]"></a>_Drv_PwmTimerDriven4IrqHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven4IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Drv_PwmTimerDriven4IrqHandler &rArr; __Drv_PwmTimerDrivenDone &rArr; _Drv_StepmotorMoveUpdate &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_PwmTimerDrivenDone
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDrivenUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
</UL>
<P><STRONG><a name="[90]"></a>_Drv_PwmTimerDriven5IrqHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven5IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Drv_PwmTimerDriven5IrqHandler &rArr; __Drv_PwmTimerDrivenDone &rArr; _Drv_StepmotorMoveUpdate &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_PwmTimerDrivenDone
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDrivenUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
</UL>
<P><STRONG><a name="[91]"></a>_Drv_PwmTimerDriven6IrqHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven6IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Drv_PwmTimerDriven6IrqHandler &rArr; __Drv_PwmTimerDrivenDone &rArr; _Drv_StepmotorMoveUpdate &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_PwmTimerDrivenDone
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDrivenUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
</UL>
<P><STRONG><a name="[92]"></a>_Drv_PwmTimerDriven7IrqHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven7IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Drv_PwmTimerDriven7IrqHandler &rArr; __Drv_PwmTimerDrivenDone &rArr; _Drv_StepmotorMoveUpdate &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_PwmTimerDrivenDone
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDrivenUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
</UL>
<P><STRONG><a name="[93]"></a>_Drv_PwmTimerDriven8IrqHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven8IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Drv_PwmTimerDriven8IrqHandler &rArr; __Drv_PwmTimerDrivenDone &rArr; _Drv_StepmotorMoveUpdate &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_PwmTimerDrivenDone
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDrivenUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
</UL>
<P><STRONG><a name="[94]"></a>_Drv_PwmTimerDriven9IrqHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i._Drv_PwmTimerDriven9IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Drv_PwmTimerDriven9IrqHandler &rArr; __Drv_PwmTimerDrivenDone &rArr; _Drv_StepmotorMoveUpdate &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_PwmTimerDrivenDone
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDrivenUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_timer_driven.o(i.Drv_PwmTimerDrivenCreate)
</UL>
<P><STRONG><a name="[19e]"></a>_Drv_PwmTimerDrivenUpdate</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_pwm_timer_driven.o(i._Drv_PwmTimerDrivenUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Drv_PwmTimerDrivenUpdate &rArr; Drv_PwmTimerDrivenDisable &rArr; Hal_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WritePin
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven9IrqHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven8IrqHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven7IrqHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven6IrqHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven5IrqHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven4IrqHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven3IrqHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven2IrqHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmTimerDriven1IrqHandler
</UL>

<P><STRONG><a name="[1a2]"></a>_Drv_StepmotorCalcCurStep</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, drv_stepmotor.o(i._Drv_StepmotorCalcCurStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _Drv_StepmotorCalcCurStep
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorDrv
</UL>

<P><STRONG><a name="[138]"></a>_Drv_StepmotorCallocLadstep</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_stepmotor.o(i._Drv_StepmotorCallocLadstep))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _Drv_StepmotorCallocLadstep &rArr; calloc &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCreate
</UL>

<P><STRONG><a name="[139]"></a>_Drv_StepmotorCallocMotorFre</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_stepmotor.o(i._Drv_StepmotorCallocMotorFre))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _Drv_StepmotorCallocMotorFre &rArr; calloc &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorCreate
</UL>

<P><STRONG><a name="[13d]"></a>_Drv_StepmotorConfigSd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_stepmotor.o(i._Drv_StepmotorConfigSd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Drv_StepmotorConfigSd &rArr; _Drv_StepmotorLadstepSdConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorLadstepSdConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveSdBegin
</UL>

<P><STRONG><a name="[13f]"></a>_Drv_StepmotorConfigSp</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, drv_stepmotor.o(i._Drv_StepmotorConfigSp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Drv_StepmotorConfigSp &rArr; _Drv_StepmotorLadstepSpConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorLadstepSpConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorLadstepSdConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveSpBegin
</UL>

<P><STRONG><a name="[13b]"></a>_Drv_StepmotorDrv</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, drv_stepmotor.o(i._Drv_StepmotorDrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WritePin
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorCalcCurStep
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenEnable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenDisable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_StepmotorDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorMoveUpdate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveSpBegin
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveSdBegin
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_StepmotorMoveRlBegin
</UL>

<P><STRONG><a name="[1a0]"></a>_Drv_StepmotorLadstepSdConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_stepmotor.o(i._Drv_StepmotorLadstepSdConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Drv_StepmotorLadstepSdConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorConfigSp
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorConfigSd
</UL>

<P><STRONG><a name="[1a1]"></a>_Drv_StepmotorLadstepSpConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_stepmotor.o(i._Drv_StepmotorLadstepSpConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Drv_StepmotorLadstepSpConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorConfigSp
</UL>

<P><STRONG><a name="[1a4]"></a>_Drv_StepmotorMoveUpdate</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, drv_stepmotor.o(i._Drv_StepmotorMoveUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _Drv_StepmotorMoveUpdate &rArr; _Drv_StepmotorDrv &rArr; __Drv_StepmotorDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_StepmotorDrv
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmTimerDrivenDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Drv_PwmTimerDrivenDone
</UL>

<P><STRONG><a name="[87]"></a>_Drv_PwmPinIrqHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, drv_pwm_pin.o(i._Drv_PwmPinIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Drv_PwmPinIrqHandler &rArr; Hal_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_pin.o(i.Drv_PwmPinCreate)
</UL>
<P><STRONG><a name="[8b]"></a>_Drv_PwmPinIsOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_pwm_pin.o(i._Drv_PwmPinIsOn))
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_pin.o(i.Drv_PwmPinCreate)
</UL>
<P><STRONG><a name="[89]"></a>_Drv_PwmPinOff</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_pwm_pin.o(i._Drv_PwmPinOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Drv_PwmPinOff &rArr; _Drv_PwmPinPwm &rArr; Hal_SetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmPinPwm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_pin.o(i.Drv_PwmPinCreate)
</UL>
<P><STRONG><a name="[88]"></a>_Drv_PwmPinOn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_pwm_pin.o(i._Drv_PwmPinOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Drv_PwmPinOn &rArr; _Drv_PwmPinPwm &rArr; Hal_SetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmPinPwm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_pin.o(i.Drv_PwmPinCreate)
</UL>
<P><STRONG><a name="[8a]"></a>_Drv_PwmPinPwm</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_pwm_pin.o(i._Drv_PwmPinPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Drv_PwmPinPwm &rArr; Hal_SetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SetTimer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_EnTimer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_DisTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmPinOn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Drv_PwmPinOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm_pin.o(i.Drv_PwmPinCreate)
</UL>
<P><STRONG><a name="[186]"></a>_Sys_CmdRegeditNobeCreate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sys_cmd_regedit.o(i._Sys_CmdRegeditNobeCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _Sys_CmdRegeditNobeCreate &rArr; calloc &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditAddNode
</UL>

<P><STRONG><a name="[b6]"></a>_Sys_CmdDoFunc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sys_cmd_scheduler.o(i._Sys_CmdDoFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Sys_CmdDoFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_cmd_scheduler.o(i.Sys_CmdScheduler)
</UL>
<P><STRONG><a name="[18c]"></a>_Sys_DoubleListAndDataCheck</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_double_list.o(i._Sys_DoubleListAndDataCheck))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DoubleListNodeAdd
</UL>

<P><STRONG><a name="[18d]"></a>_Sys_DoubleListLen</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sys_double_list.o(i._Sys_DoubleListLen))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DoubleListNodeAdd
</UL>

<P><STRONG><a name="[18e]"></a>_Sys_DoubleListNodeCreate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sys_double_list.o(i._Sys_DoubleListNodeCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _Sys_DoubleListNodeCreate &rArr; calloc &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DoubleListNodeAdd
</UL>

<P><STRONG><a name="[18f]"></a>_Sys_DoubleListNodeGet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys_double_list.o(i._Sys_DoubleListNodeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Sys_DoubleListNodeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DoubleListNodeAdd
</UL>

<P><STRONG><a name="[bd]"></a>_Sys_TaskCheck</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys_tasks.o(i._Sys_TaskCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _Sys_TaskCheck &rArr; Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_GetIntoThread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_tasks.o(i.Sys_TaskStart)
</UL>
<P><STRONG><a name="[b9]"></a>_Sys_TaskCmdScheduler1</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, sys_tasks.o(i._Sys_TaskCmdScheduler1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _Sys_TaskCmdScheduler1 &rArr; Sys_CmdRegeditCreate &rArr; Sys_DoubleListCreate &rArr; free &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_GetIntoThread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdScheduler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_tasks.o(i.Sys_TaskStart)
</UL>
<P><STRONG><a name="[ba]"></a>_Sys_TaskCmdScheduler2</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, sys_tasks.o(i._Sys_TaskCmdScheduler2))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _Sys_TaskCmdScheduler2 &rArr; Sys_CmdRegeditCreate &rArr; Sys_DoubleListCreate &rArr; free &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_GetIntoThread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdScheduler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_tasks.o(i.Sys_TaskStart)
</UL>
<P><STRONG><a name="[bb]"></a>_Sys_TaskCmdScheduler3</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, sys_tasks.o(i._Sys_TaskCmdScheduler3))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _Sys_TaskCmdScheduler3 &rArr; Sys_CmdRegeditCreate &rArr; Sys_DoubleListCreate &rArr; free &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_GetIntoThread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdScheduler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_tasks.o(i.Sys_TaskStart)
</UL>
<P><STRONG><a name="[bc]"></a>_Sys_TaskCmdScheduler4</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, sys_tasks.o(i._Sys_TaskCmdScheduler4))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _Sys_TaskCmdScheduler4 &rArr; Sys_CmdRegeditCreate &rArr; Sys_DoubleListCreate &rArr; free &rArr; rt_free &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_GetIntoThread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdScheduler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_CmdRegeditCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_tasks.o(i.Sys_TaskStart)
</UL>
<P><STRONG><a name="[b8]"></a>_Sys_TaskCmdTransceiver</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sys_tasks.o(i._Sys_TaskCmdTransceiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _Sys_TaskCmdTransceiver &rArr; Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_GetIntoThread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_tasks.o(i.Sys_TaskStart)
</UL>
<P><STRONG><a name="[be]"></a>_Sys_TaskResident1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys_tasks.o(i._Sys_TaskResident1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _Sys_TaskResident1 &rArr; Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_GetIntoThread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_tasks.o(i.Sys_TaskStart)
</UL>
<P><STRONG><a name="[bf]"></a>_Sys_TaskResident2</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys_tasks.o(i._Sys_TaskResident2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _Sys_TaskResident2 &rArr; Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_GetIntoThread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_tasks.o(i.Sys_TaskStart)
</UL>
<P><STRONG><a name="[c0]"></a>_Sys_TaskResident3</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys_tasks.o(i._Sys_TaskResident3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _Sys_TaskResident3 &rArr; Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_GetIntoThread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_tasks.o(i.Sys_TaskStart)
</UL>
<P><STRONG><a name="[c1]"></a>_Sys_TaskResident4</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys_tasks.o(i._Sys_TaskResident4))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _Sys_TaskResident4 &rArr; Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_GetIntoThread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_tasks.o(i.Sys_TaskStart)
</UL>
<P><STRONG><a name="[a8]"></a>_Func_FreeMsg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, func_common.o(i._Func_FreeMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Func_FreeMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[a6]"></a>_Func_GatherMsg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, func_common.o(i._Func_GatherMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Func_GatherMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[a7]"></a>_Func_GetMsg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, func_common.o(i._Func_GetMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Func_GetMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[b5]"></a>_Func_Id1RxDone</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, func_common.o(i._Func_Id1RxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _Func_Id1RxDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[b4]"></a>_Func_Id2RxDone</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, func_common.o(i._Func_Id2RxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _Func_Id2RxDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[b3]"></a>_Func_Id3RxDone</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, func_common.o(i._Func_Id3RxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _Func_Id3RxDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[b2]"></a>_Func_Id4RxDone</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, func_common.o(i._Func_Id4RxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _Func_Id4RxDone &rArr; Osal_SemPost &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_SemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[a5]"></a>_Func_PutMsg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, func_common.o(i._Func_PutMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Func_PutMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[ad]"></a>_Func_TaskCheck</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, func_common.o(i._Func_TaskCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _Func_TaskCheck &rArr; Osal_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_Delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(i.Func_Init)
</UL>
<P><STRONG><a name="[dc]"></a>cmd_reboot</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, func_common.o(i.cmd_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Reboot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(FSymTab)
</UL>
<P><STRONG><a name="[db]"></a>cmd_show_can</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, func_common.o(i.cmd_show_can))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cmd_show_can &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_common.o(FSymTab)
</UL>
<P><STRONG><a name="[95]"></a>_Func_1_Hellow</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, func_1.o(i._Func_1_Hellow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Func_1_Hellow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_1.o(i.Func_1_Init)
</UL>
<P><STRONG><a name="[97]"></a>_Func_1_MoveBackward</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, func_1.o(i._Func_1_MoveBackward))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _Func_1_MoveBackward &rArr; Drv_MccMoveSynchronizingStep &rArr; _Drv_MccMoveSubdivisionStep &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccMoveSynchronizingStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_1.o(i.Func_1_Init)
</UL>
<P><STRONG><a name="[98]"></a>_Func_1_MoveByCoordinates</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, func_1.o(i._Func_1_MoveByCoordinates))
<BR>[Address Reference Count : 1]<UL><LI> func_1.o(i.Func_1_Init)
</UL>
<P><STRONG><a name="[96]"></a>_Func_1_MoveForward</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, func_1.o(i._Func_1_MoveForward))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _Func_1_MoveForward &rArr; Drv_MccMoveSynchronizingStep &rArr; _Drv_MccMoveSubdivisionStep &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccMoveSynchronizingStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_1.o(i.Func_1_Init)
</UL>
<P><STRONG><a name="[99]"></a>_Func_2_Hellow</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, func_2.o(i._Func_2_Hellow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Func_2_Hellow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_2.o(i.Func_2_Init)
</UL>
<P><STRONG><a name="[9b]"></a>_Func_2_MoveBackward</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, func_2.o(i._Func_2_MoveBackward))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _Func_2_MoveBackward &rArr; Drv_MccMoveSynchronizingStep &rArr; _Drv_MccMoveSubdivisionStep &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccMoveSynchronizingStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_2.o(i.Func_2_Init)
</UL>
<P><STRONG><a name="[9c]"></a>_Func_2_MoveByCoordinates</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, func_2.o(i._Func_2_MoveByCoordinates))
<BR>[Address Reference Count : 1]<UL><LI> func_2.o(i.Func_2_Init)
</UL>
<P><STRONG><a name="[9a]"></a>_Func_2_MoveForward</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, func_2.o(i._Func_2_MoveForward))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _Func_2_MoveForward &rArr; Drv_MccMoveSynchronizingStep &rArr; _Drv_MccMoveSubdivisionStep &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccMoveSynchronizingStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_2.o(i.Func_2_Init)
</UL>
<P><STRONG><a name="[9d]"></a>_Func_3_Hellow</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, func_3.o(i._Func_3_Hellow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Func_3_Hellow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_3.o(i.Func_3_Init)
</UL>
<P><STRONG><a name="[9f]"></a>_Func_3_MoveBackward</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, func_3.o(i._Func_3_MoveBackward))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _Func_3_MoveBackward &rArr; Drv_MccMoveSynchronizingStep &rArr; _Drv_MccMoveSubdivisionStep &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccMoveSynchronizingStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_3.o(i.Func_3_Init)
</UL>
<P><STRONG><a name="[a0]"></a>_Func_3_MoveByCoordinates</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, func_3.o(i._Func_3_MoveByCoordinates))
<BR>[Address Reference Count : 1]<UL><LI> func_3.o(i.Func_3_Init)
</UL>
<P><STRONG><a name="[9e]"></a>_Func_3_MoveForward</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, func_3.o(i._Func_3_MoveForward))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _Func_3_MoveForward &rArr; Drv_MccMoveSynchronizingStep &rArr; _Drv_MccMoveSubdivisionStep &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccMoveSynchronizingStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_3.o(i.Func_3_Init)
</UL>
<P><STRONG><a name="[a1]"></a>_Func_4_Hellow</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, func_4.o(i._Func_4_Hellow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Func_4_Hellow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_4.o(i.Func_4_Init)
</UL>
<P><STRONG><a name="[a3]"></a>_Func_4_MoveBackward</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, func_4.o(i._Func_4_MoveBackward))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _Func_4_MoveBackward &rArr; Drv_MccMoveSynchronizingStep &rArr; _Drv_MccMoveSubdivisionStep &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccMoveSynchronizingStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_4.o(i.Func_4_Init)
</UL>
<P><STRONG><a name="[a4]"></a>_Func_4_MoveByCoordinates</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, func_4.o(i._Func_4_MoveByCoordinates))
<BR>[Address Reference Count : 1]<UL><LI> func_4.o(i.Func_4_Init)
</UL>
<P><STRONG><a name="[a2]"></a>_Func_4_MoveForward</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, func_4.o(i._Func_4_MoveForward))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _Func_4_MoveForward &rArr; Drv_MccMoveSynchronizingStep &rArr; _Drv_MccMoveSubdivisionStep &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MccMoveSynchronizingStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_4.o(i.Func_4_Init)
</UL>
<P><STRONG><a name="[192]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f4]"></a>_SysTick_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, board.o(i._SysTick_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1c4]"></a>bus_fault_track</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, cpuport.o(i.bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[1d8]"></a>hard_fault_track</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cpuport.o(i.hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hard_fault_track &rArr; usage_fault_track &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[1d9]"></a>mem_manage_fault_track</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cpuport.o(i.mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[1da]"></a>usage_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cpuport.o(i.usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[239]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[22b]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
